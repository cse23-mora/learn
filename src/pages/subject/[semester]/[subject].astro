---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
	const semesterSubjects = {
		'2nd': [
			'data-structures-algorithms',
			'computer-organization', 
			'methods-of-mathematics',
			'program-construction',
			'theory-of-electricity',
			'communication-skills'
		],
		'3rd': [
			'ai',
			'computer-architecture',
			'thermodynamics', 
			'database-systems',
			'differential-equations',
			'operating-systems',
			'communication-skills',
			'data-communication-networking',
			'applied-statistics'
		]
	};

	const paths = [];
	for (const [semester, subjects] of Object.entries(semesterSubjects)) {
		for (const subject of subjects) {
			paths.push({ params: { semester, subject } });
		}
	}
	
	return paths;
}

const { semester, subject } = Astro.params;

// Get all docs
const docs = await getCollection('docs');

// Filter docs for this specific subject
const subjectPath = `${semester}-semester/${subject}`;
const subjectDocs = docs.filter(doc => 
	doc.id.startsWith(subjectPath) && 
	doc.id !== `${subjectPath}/index` &&
	!doc.id.includes('/index.mdx')
);

// Sort docs by filename
subjectDocs.sort((a, b) => a.id.localeCompare(b.id));

// Get subject info
const subjectNames = {
	'data-structures-algorithms': 'Data Structures & Algorithms',
	'computer-organization': 'Computer Organization and Digital Design',
	'methods-of-mathematics': 'Methods of Mathematics',
	'program-construction': 'Program Construction',
	'theory-of-electricity': 'Theory of Electricity',
	'communication-skills': 'Communication Skills',
	'ai': 'AI (Artificial Intelligence)',
	'computer-architecture': 'Computer Architecture',
	'thermodynamics': 'Thermodynamics',
	'database-systems': 'Database Systems',
	'differential-equations': 'Differential Equations (DE)',
	'operating-systems': 'Operating Systems',
	'data-communication-networking': 'Data Communication & Networking',
	'applied-statistics': 'Applied Statistics'
};

const subjectName = subjectNames[subject as keyof typeof subjectNames] || subject;
const semesterTitle = semester === '2nd' ? '2nd Semester' : '3rd Semester';

// Create a function to get lesson title from file path
function getLessonTitle(id: string): string {
	const parts = id.split('/');
	const filename = parts[parts.length - 1];
	
	// Remove file extension and convert to title case
	const title = filename
		.replace(/\.(md|mdx)$/, '')
		.split('-')
		.map(word => word.charAt(0).toUpperCase() + word.slice(1))
		.join(' ');
	
	return title;
}

// Group lessons by folders
const lessonGroups: Record<string, typeof subjectDocs> = {};
const rootLessons: typeof subjectDocs = [];

subjectDocs.forEach(doc => {
	const pathParts = doc.id.replace(`${subjectPath}/`, '').split('/');
	
	if (pathParts.length === 1) {
		// Root level lesson
		rootLessons.push(doc);
	} else {
		// Lesson in subfolder
		const folder = pathParts[0];
		if (!lessonGroups[folder]) {
			lessonGroups[folder] = [];
		}
		lessonGroups[folder].push(doc);
	}
});

if (subjectDocs.length === 0) {
	return Astro.redirect(`/semester/${semester}`);
}
---

<Layout title={`${subjectName} | ${semesterTitle}`}>
	<main>
		<nav class="breadcrumb">
			<a href="/">Home</a>
			<span>/</span>
			<a href={`/semester/${semester}`}>{semesterTitle}</a>
			<span>/</span>
			<span>{subjectName}</span>
		</nav>

		<div class="header">
			<h1>{subjectName}</h1>
			<p>{semesterTitle} â€¢ {subjectDocs.length} lessons available</p>
		</div>

		<div class="lessons-container">
			{rootLessons.length > 0 && (
				<div class="lesson-group">
					<div class="lessons-grid">
						{rootLessons.map((lesson) => (
							<a href={`/lesson/${lesson.id.replace(/\.(md|mdx)$/, '')}`} class="lesson-card">
								<div class="lesson-content">
									<h3>{getLessonTitle(lesson.id)}</h3>
									<div class="lesson-meta">
										<span class="lesson-type">Lesson</span>
									</div>
								</div>
							</a>
						))}
					</div>
				</div>
			)}

			{Object.entries(lessonGroups).map(([folder, lessons]) => (
				<div class="lesson-group">
					<h2 class="folder-title">{folder.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}</h2>
					<div class="lessons-grid">
						{lessons.map((lesson) => (
							<a href={`/lesson/${lesson.id.replace(/\.(md|mdx)$/, '')}`} class="lesson-card">
								<div class="lesson-content">
									<h3>{getLessonTitle(lesson.id)}</h3>
									<div class="lesson-meta">
										<span class="lesson-type">Lesson</span>
									</div>
								</div>
							</a>
						))}
					</div>
				</div>
			))}
		</div>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 2rem;
		max-width: 1200px;
	}

	.breadcrumb {
		margin-bottom: 2rem;
		font-size: 0.9rem;
	}

	.breadcrumb a {
		color: #667eea;
		text-decoration: none;
	}

	.breadcrumb a:hover {
		text-decoration: underline;
	}

	.breadcrumb span {
		margin: 0 0.5rem;
		color: #666;
	}

	.breadcrumb span:last-child {
		color: #1a202c;
		font-weight: 500;
	}

	.header {
		margin-bottom: 3rem;
	}

	.header h1 {
		font-size: 2.5rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
		color: #1a202c;
	}

	.header p {
		font-size: 1rem;
		color: #666;
	}

	.lessons-container {
		display: flex;
		flex-direction: column;
		gap: 2.5rem;
	}

	.lesson-group {
		background: white;
		border: 1px solid #e2e8f0;
		border-radius: 8px;
		padding: 1.5rem;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
	}

	.folder-title {
		font-size: 1.5rem;
		font-weight: 600;
		color: #1a202c;
		margin-bottom: 1rem;
		padding-bottom: 0.5rem;
		border-bottom: 2px solid #f7fafc;
	}

	.lessons-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
		gap: 1rem;
	}

	.lesson-card {
		background: #f8fafc;
		border: 1px solid #e2e8f0;
		border-radius: 6px;
		padding: 1.25rem;
		text-decoration: none;
		transition: all 0.2s ease;
	}

	.lesson-card:hover {
		background: white;
		transform: translateY(-1px);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		border-color: #667eea;
	}

	.lesson-content h3 {
		color: #1a202c;
		font-size: 1.1rem;
		margin-bottom: 0.75rem;
		font-weight: 500;
		line-height: 1.3;
	}

	.lesson-meta {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.lesson-type {
		background: #667eea;
		color: white;
		padding: 0.2rem 0.6rem;
		border-radius: 12px;
		font-size: 0.75rem;
		font-weight: 500;
	}

	@media (max-width: 768px) {
		main {
			padding: 1rem;
		}
		
		.header h1 {
			font-size: 2rem;
		}
		
		.lessons-grid {
			grid-template-columns: 1fr;
		}

		.lesson-group {
			padding: 1rem;
		}
	}
</style>